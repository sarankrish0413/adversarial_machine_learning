package com.aml.spamfilter.featureselection;

import com.aml.spamfilter.common.DatasetCreator;
import weka.attributeSelection.AttributeSelection;
import weka.attributeSelection.InfoGainAttributeEval;
import weka.attributeSelection.Ranker;
import weka.core.Instances;

import java.io.*;
import java.util.ArrayList;
import java.util.List;


/**
 * This class takes in large list of tokens generated by spamassasin
 * sa-learn utility from TREC 2007 dataset and generates a subset of tokens
 * using information gain criterion which will be used as feature set in other
 * modules of research project.
 *
 * @author saranyakrishnan
 */
public class FeatureSetCreator {

    /** Location of file that has list of tokens learnt by spamassasin sa-learn */
    private String tokensFileLocation;

    /** Location of output file where we want to output the feature set */
    private String featureSetOutputFileLocation;

    /** Location of index file where we have a list of all email file names and its corresponding class (spam or ham) */
    private String emailClassificationIndexFile;

    /** Number of emails we want to choose */
    private int emailCount;

    /** Location of folder that has all the emails */
    private String emailFolderLocation;

    /** Number of features to create */
    private int outputFeatureSetCount;

    public static void main(String[] args) throws Exception {
        if (args.length != 6) {
            System.out.println("Usage: java -cp <jar> <classname> emailFolderLocation tokensFileLocation featureSetOutputFileLocation emailClassificationIndexFile emailCount outputFeaturesetCount");
        }

        FeatureSetCreator featureSetCreator = new FeatureSetCreator()
                .withEmailFolderLocation(args[0])
                .withTokensFileLocation(args[1])
                .withFeatureSetOutputFileLocation(args[2])
                .withEmailClassificationIndexFile(args[3])
                .withEmailCount(Integer.parseInt(args[4]))
                .withOutputFeatureSetCount(Integer.parseInt(args[5]));

        featureSetCreator.validate();

        featureSetCreator.createFeatureSet();
    }

    public FeatureSetCreator withEmailFolderLocation(String emailFolderLocation) {
        this.emailFolderLocation = emailFolderLocation;
        return this;
    }

    public FeatureSetCreator withTokensFileLocation(String tokensFileLocation) {
        this.tokensFileLocation = tokensFileLocation;
        return this;
    }

    public FeatureSetCreator withFeatureSetOutputFileLocation(String featureSetOutputFileLocation) {
        this.featureSetOutputFileLocation = featureSetOutputFileLocation;
        return this;
    }

    public FeatureSetCreator withEmailClassificationIndexFile(String emailClassificationIndexFile) {
        this.emailClassificationIndexFile = emailClassificationIndexFile;
        return this;
    }

    public FeatureSetCreator withEmailCount(int emailCount) {
        this.emailCount = emailCount;
        return this;
    }

    public FeatureSetCreator withOutputFeatureSetCount(int outputFeatureSetCount) {
        this.outputFeatureSetCount = outputFeatureSetCount;
        return this;
    }


    public void validate() throws Exception {
        if (!new File(emailFolderLocation).isDirectory()) {
            throw new RuntimeException("Email directory parameter is incorrect");
        }

        String []files = {tokensFileLocation, featureSetOutputFileLocation, emailClassificationIndexFile};
        for (String file : files) {
            if (!new File(file).exists()) {
                throw new RuntimeException("Location of file that contains tokens is incorrect");
            }
        }
    }

    public void createFeatureSet() throws Exception {
        DatasetCreator datasetCreator = new DatasetCreator()
                .withDatasetName("trec2007")
                .withEmailFolderLocation(emailFolderLocation)
                .withTokensFileLocation(tokensFileLocation)
                .withEmailClassificationIndexFile(emailClassificationIndexFile)
                .withEmailCount(emailCount)
                .withOutputDataSetFileName("dataset.txt");

        datasetCreator.createDataSet();

        List<String> subsetOfFeatures = performInformationGainCriterionOnDataset();
        PrintWriter printWriter = new PrintWriter(featureSetOutputFileLocation);
        subsetOfFeatures.stream().forEach(printWriter::println);
        printWriter.close();
    }

    private List<String> performInformationGainCriterionOnDataset() throws Exception {
        List<String> selectedFeatures = new ArrayList<>();
        File initialFile = new File("dataset.txt");
        InputStream targetStream = new FileInputStream(initialFile);
        Instances data = new Instances(new BufferedReader(new InputStreamReader(targetStream, "UTF-8")));

        data.setClassIndex(data.numAttributes() - 1);

        AttributeSelection selection = getAttributeSelector(data);

        int[] selectedAttributes = selection.selectedAttributes();

        for (int i = 0; i < selectedAttributes.length; i++) {
            selectedFeatures.add(data.attribute(selectedAttributes[i]).name());
        }

        return selectedFeatures;
    }

    private AttributeSelection getAttributeSelector(Instances trainingData) throws Exception {
        AttributeSelection selector = new AttributeSelection();
        InfoGainAttributeEval evaluator = new InfoGainAttributeEval();
        Ranker ranker = new Ranker();
        ranker.setNumToSelect(outputFeatureSetCount);
        ranker.setGenerateRanking(true);
        selector.setEvaluator(evaluator);
        selector.setSearch(ranker);
        selector.SelectAttributes(trainingData);
        return selector;
    }

}
